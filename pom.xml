<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>io.github.forget-the-bright</groupId>
    <artifactId>HaoUtil</artifactId>
    <version>1.0.15.7</version>
    <!--20250530 mvn中央仓库要求包括项目名称属性。不然无法发布-->
    <name>HaoUtil</name>

    <properties>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <spring.boot.version>2.7.13</spring.boot.version> <!-- 默认值 -->
        <spring-cloud.version>2021.0.3</spring-cloud.version>
        <swagger.core.version>1.6.2</swagger.core.version>
        <hutool.version>5.8.25</hutool.version>
        <lombok.version>1.18.30</lombok.version>
        <poi.version>4.1.2</poi.version>
        <junit.version>5.9.2</junit.version>
        <mvel.version>2.5.2.Final</mvel.version>
        <javaparser-core.version> 3.27.0</javaparser-core.version>
    </properties>
    <description>简单的复用项目中常用的工具</description>
    <url>https://github.com/forget-the-bright/HaoUtil</url>
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring.boot.version}</version> <!-- 这里的版本可以设置为一个默认值 -->
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <!-- SpringCloud 微服务 -->
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>


            <dependency>
                <groupId>io.swagger</groupId>
                <artifactId>swagger-models</artifactId>
                <version>${swagger.core.version}</version>
                <type>pom</type> <!-- 指明这是一个 POM 文件 -->
                <scope>import</scope> <!-- 指定导入作用域 -->
            </dependency>

            <dependency>
                <groupId>io.swagger</groupId>
                <artifactId>swagger-annotations</artifactId>
                <version>${swagger.core.version}</version>
<!--                <type>pom</type> &lt;!&ndash; 指明这是一个 POM 文件 &ndash;&gt;-->
                <optional>true</optional>
                <scope>provided</scope> <!-- 指定导入作用域 -->
            </dependency>

            <!--表达式解析库-->
            <dependency>
                <groupId>org.mvel</groupId>
                <artifactId>mvel2</artifactId>
                <version>${mvel.version}</version>
                <!--            <optional>true</optional>-->
                <scope>compile</scope>
            </dependency>

            <dependency>
                <groupId>org.apache.poi</groupId>
                <artifactId>poi-ooxml</artifactId>
                <version>${poi.version}</version>
                <optional>true</optional>
                <scope>provided</scope>
            </dependency>

            <dependency>
                <groupId>cn.hutool</groupId>
                <artifactId>hutool-all</artifactId>
                <optional>true</optional>
                <scope>provided</scope>
                <version>${hutool.version}</version>
            </dependency>

            <dependency>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok</artifactId>
                <version>${lombok.version}</version>
                <scope>provided</scope>
            </dependency>

            <dependency>
                <groupId>com.github.javaparser</groupId>
                <artifactId>javaparser-core</artifactId>
                <version>${javaparser-core.version}</version>
            </dependency>

            <!-- JUnit 5 -->
            <dependency>
                <groupId>org.junit.jupiter</groupId>
                <artifactId>junit-jupiter-engine</artifactId>
                <version>5.9.0</version> <!-- 请根据需要选择最新版本 -->
                <optional>true</optional>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.junit.jupiter</groupId>
                <artifactId>junit-jupiter-api</artifactId>
                <version>5.9.0</version>
                <optional>true</optional>
                <scope>test</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>
    <!--使用 optional 标记的依赖不会被传递到使用该库的项目中。换句话说，当其他项目引入这个库时，Maven 不会自动引入这个可选依赖。-->
    <!--    scope 标记
    provided: 表示该依赖在编译和测试时是可用的，但在运行时不包含在最终的 JAR 文件中。一般用于 Servlet API 或其他在容器中提供的库。

    runtime: 表示该依赖在编译时不可用，但在运行时可用，适用于那些只在运行时需要的依赖。
    import: 不实际包含依赖: 使用  import作用域并不会将这些依赖实际添加到你的项目中，而是使得该 BOM 文件中定义的依赖版本可用于后续定义依赖。
    compile: 编译期引入
    -->
    <dependencies>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter</artifactId>
            <scope>provided</scope>
            <optional>true</optional>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
            <scope>provided</scope>
            <optional>true</optional>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-aop</artifactId>
            <scope>provided</scope>
            <optional>true</optional>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <scope>provided</scope>
            <optional>true</optional>
        </dependency>

        <dependency>
            <groupId>cn.hutool</groupId>
            <artifactId>hutool-all</artifactId>
        </dependency>

        <!--表达式解析库-->
        <dependency>
            <groupId>org.mvel</groupId>
            <artifactId>mvel2</artifactId>
        </dependency>

        <dependency>
            <groupId>org.apache.poi</groupId>
            <artifactId>poi-ooxml</artifactId>
        </dependency>

        <dependency>
            <groupId>io.swagger</groupId>
            <artifactId>swagger-annotations</artifactId>
        </dependency>

        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
        </dependency>

        <dependency>
            <groupId>com.github.javaparser</groupId>
            <artifactId>javaparser-core</artifactId>
        </dependency>

        <!-- JUnit 5 -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
        </dependency>

    </dependencies>



    <developers>
        <developer>
            <name>wanghao</name>
            <email>helloworldwh@163.com</email>
            <url>https://github.com/forget-the-bright</url>
        </developer>
    </developers>

    <licenses>
        <license>
            <name>The Apache Software License, Version 2.0</name>
            <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
            <distribution>repo</distribution>
            <comments>The Apache Software License, Version 2.0</comments>
        </license>
    </licenses>

    <scm>
        <connection>scm:git:https://github.com/forget-the-bright/HaoUtil.git</connection>
        <developerConnection>scm:git:https://github.com/forget-the-bright/HaoUtil.git</developerConnection>
        <url>https://github.com/forget-the-bright/HaoUtil.git</url>
    </scm>

    <distributionManagement>
        <snapshotRepository>
            <id>central</id>
            <url>https://s01.oss.sonatype.org/content/repositories/snapshots</url>
        </snapshotRepository>
        <repository>
            <id>central</id>
            <url>https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/</url>
        </repository>
    </distributionManagement>
    <!--打包命令复制-->
    <!--清理环境 mvn clean -->
    <!--清理环境 mvn compile -->
    <!--关闭测试打包 mvn clean package -D"maven.test.skip"=true   -->
    <!--关闭测试安装 mvn clean install -D"maven.test.skip"=true    -->
    <!--关闭测试发布 mvn clean deploy -D"maven.test.skip"=true    -->
    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <classifier>exec</classifier>
                    <!-- 不设置skip为false:打包的时候生成的jar包结构如下：BOOT-INF下包括了项目结构包和lib(依赖的代码jar包)，
                    最外层还有一个启动加载器类包,主要用在需求执行（运行）的jar，如果打包是一个依赖包，不需要单独运行，
                    就设置 <skip>true</skip>.如果是一个需要启动运行的jar，就不需要添加<skip>，或者设置<skip>为false。
                     -->
                    <skip>true</skip>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.sonatype.central</groupId>
                <artifactId>central-publishing-maven-plugin</artifactId>
                <version>0.4.0</version>
                <extensions>true</extensions>
                <configuration>
                    <publishingServerId>central</publishingServerId>
                    <tokenAuth>true</tokenAuth>
                    <autoPublish>true</autoPublish>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-gpg-plugin</artifactId>
                <version>3.2.7</version>
                <executions>
                    <execution>
                        <id>sign-artifacts</id>
                        <phase>verify</phase>
                        <goals>
                            <goal>sign</goal>
                        </goals>
                        <configuration>
                            <keyname>${gpg.keyname}</keyname>
                            <passphrase>${gpg.passphrase}</passphrase>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>3.3.1</version>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <goals>
                            <goal>jar-no-fork</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>3.11.2</version>
                <executions>
                    <execution>
                        <id>attach-javadocs</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>